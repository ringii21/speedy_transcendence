// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int     @id @default(autoincrement())
  email        String  @unique
  username     String  @unique
  image        String
  twoFaEnabled Boolean @default(false) @map("two_fa_enabled")
  twoFaSecret  String? @map("two_fa_secret")
  refreshToken String? @map("refresh_token")
  accessToken  String? @map("access_token")

  expiresAt DateTime? @map("expires_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  channels Channel[]
  members  ChannelMember[]
  actions  ChannelAction[]
  messages ChannelMessage[]

  friends  User[] @relation("friends")
  friendOf User[] @relation("friends")

  playedAsp1 Game[] @relation("player1")
  playedAsp2 Game[] @relation("player2")

  @@map("users")
}

model Profile {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  image     String
  user      User      @relation(fields: [userId], references: [id])
  userId    Int       @unique

  @@map("profile")
}

model ChannelMessage {
  id        Int       @id @default(autoincrement())
  content   String
  sender    User      @relation(fields: [senderId], references: [id])
  senderId  Int       @map("sender_id")
  channel   Channel   @relation(fields: [channelId], references: [id])
  channelId Int       @map("channel_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@index([senderId, channelId])
  @@map("channel_messages")
}

model Channel {
  id          Int              @id @default(autoincrement())
  name        String?          @unique
  password    String?
  channelType ChannelType      @default(public)
  owner       User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     Int              @map("owner_id")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  deletedAt   DateTime?        @map("deleted_at")
  members     ChannelMember[]
  actions     ChannelAction[]
  messages    ChannelMessage[]

  @@index([name, ownerId])
  @@map("channels")
}

model ChannelMember {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int       @map("user_id")
  channel   Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId Int       @map("channel_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  role      Role      @default(user)

  @@index([userId, channelId])
  @@map("channel_members")
}

model ChannelAction {
  id         Int        @id @default(autoincrement())
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int        @map("user_id")
  channel    Channel    @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId  Int        @map("channel_id")
  actionType ActionType @map("action_type")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  deletedAt  DateTime?  @map("deleted_at")

  @@index([userId, channelId])
  @@map("channel_actions")
}

model Game {
  id            String    @id @default(uuid())
  scoreP1       Int       @map("score_p1")
  scoreP2       Int       @map("score_p2")
  player1       User      @relation("player1", fields: [player1Id], references: [id])
  player1Id     Int       @map("player1_id")
  player2       User      @relation("player2", fields: [player2Id], references: [id])
  player2Id     Int       @map("player2_id")
  exchangeCount Int       @default(0) @map("exchange_count")
  startedAt     DateTime? @map("started_at")
  endedAt       DateTime? @map("ended_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")

  @@index([player1Id, player2Id])
  @@map("games")
}

enum ChannelType {
  public
  private
  protected
  direct
}

enum Role {
  owner
  user
  admin
}

enum ActionType {
  kick
  ban
  mute
}
